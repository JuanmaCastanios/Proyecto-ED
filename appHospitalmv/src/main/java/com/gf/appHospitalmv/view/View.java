package com.gf.appHospitalmv.view;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.RowSorter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 * Crea la vista de la aplicacion
 * @author Juan Jose Blanco Diaz y Alejandro Francos Fernandez
 * @since 04-06-2024
 * @version 1.0
 */
public class View extends javax.swing.JFrame {

    private String[] columnas; //Columnas de la tabla
    private DefaultTableModel modeloTabla = new DefaultTableModel(getDatos(), columnas); //Modelo por defecto de la tabla

    /**
     * Creates new form View
     */
    public View() {
        initComponents();
        setTabla();
    }
    
    /**
     * setTabla inicia la tabla
     */
    public void setTabla() {
        this.jTable1.setModel(modeloTabla);
        this.modeloTabla = (DefaultTableModel) this.jTable1.getModel();
        RowSorter<TableModel> sorter = new TableRowSorter<>(this.modeloTabla);
        this.jTable1.setRowSorter(sorter);
        jTable1.setPreferredSize(new java.awt.Dimension(500, 500));
    }
    
    /**
     * getDatos obtiene los datod de la base de datos
     * @return Matriz con los datos
     */
    private Object[][] getDatos() {
        Object[][] obj = null;

        try (Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/hospital", "root", "")) {
            try (Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE)) {
                String sql = "SELECT * FROM paciente";
                try (ResultSet rs = st.executeQuery(sql)) {
                    ResultSetMetaData rsmd = rs.getMetaData();

                    rs.last();
                    int numCols = rsmd.getColumnCount();
                    int numFils = rs.getRow();

                    obj = new Object[numFils][numCols];
                    setColumnas(rsmd);
                    int j = 0;
                    rs.beforeFirst();
                    while (rs.next()) {
                        for (int i = 0; i < numCols; i++) {
                            obj[j][i] = rs.getObject(i + 1);
                        }
                        j++;
                    }

                } catch (SQLException ex) {
                    Logger.getLogger(View.class.getName()).log(Level.SEVERE, null, ex);
                }
            } catch (SQLException ex) {
                Logger.getLogger(View.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (SQLException ex) {
            Logger.getLogger(View.class.getName()).log(Level.SEVERE, null, ex);
        }
        return obj;
    }

    /**
     * setConumnas recoge el nombre de las columnas de la tabla
     * @param rsmd Metadatos de la consulta
     */
    private void setColumnas(ResultSetMetaData rsmd) {
        try {
            columnas = new String[rsmd.getColumnCount()];
            for (int i = 1; i <= rsmd.getColumnCount(); i++) {
                columnas[i - 1] = rsmd.getColumnLabel(i);
            }
        } catch (SQLException ex) {
            Logger.getLogger(View.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public JButton getjButtonActualizar() {
        return jButtonActualizar;
    }

    public void setjButtonActualizar(JButton jButtonActualizar) {
        this.jButtonActualizar = jButtonActualizar;
    }

    public JButton getjButtonBorrar() {
        return jButtonBorrar;
    }

    public void setjButtonBorrar(JButton jButtonBorrar) {
        this.jButtonBorrar = jButtonBorrar;
    }

    public JButton getjButtonConsultar() {
        return jButtonConsultar;
    }

    public void setjButtonConsultar(JButton jButtonConsultar) {
        this.jButtonConsultar = jButtonConsultar;
    }

    public JButton getjButtonInsertar() {
        return jButtonInsertar;
    }

    public void setjButtonInsertar(JButton jButtonInsertar) {
        this.jButtonInsertar = jButtonInsertar;
    }
    /**
     * actualizarTabla actualiza la tabla cuando se realice una modificacion
     */
    public void actualizarTabla() {
        modeloTabla.setDataVector(getDatos(), columnas);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButtonInsertar = new javax.swing.JButton();
        jButtonBorrar = new javax.swing.JButton();
        jButtonActualizar = new javax.swing.JButton();
        jButtonConsultar = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Si,");

        jPanel1.setBackground(new java.awt.Color(153, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jButtonInsertar.setText("Insertar");
        jPanel1.add(jButtonInsertar);

        jButtonBorrar.setText("Borrar");
        jPanel1.add(jButtonBorrar);

        jButtonActualizar.setText("Actualizar");
        jPanel1.add(jButtonActualizar);

        jButtonConsultar.setText("Consultar");
        jPanel1.add(jButtonConsultar);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.setMaximumSize(new java.awt.Dimension(1000, 80));
        jTable1.setPreferredSize(new java.awt.Dimension(150, 80));
        jScrollPane1.setViewportView(jTable1);

        jPanel2.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_START);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new View().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonActualizar;
    private javax.swing.JButton jButtonBorrar;
    private javax.swing.JButton jButtonConsultar;
    private javax.swing.JButton jButtonInsertar;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
